;;////////////////////
;;COIN ACCOUNT STUFF
;;////////////////////

;; Enable the table gas model and load the coin contract + create coin contract tables
(env-gasmodel "table")
(env-gaslimit 150000)
(begin-tx)
(env-gas 0) (env-gaslog)
(load "fungible-v2.pact")
(env-gaslog)
(expect
  "Gas cost of loading fungible contract"
  840 (env-gas))
(env-gas 0) (env-gaslog)
(load "coin.pact")
(env-gaslog)
(expect
  "Gas cost of loading coin contract"
  3301 (env-gas))
(create-table coin.coin-table)
(create-table coin.allocation-table)
(commit-tx)

;;///////////////////////////
;Create test keys
;////////////////////////////

(begin-tx)
(env-data { "k:emily" : ["keys1"], "admin-kadena-stake": ["keys2"], "k:stuart": ["keys3"], "k:doug": ["keys4"], "prev-block-hash": "lPqiP54vy_E3rAkvgQVme2FreVXpVhOV3dIJYENZ2Zk" })
(env-keys ["keys1", "keys2", "keys3", "keys4"])
(define-keyset "k:emily" (read-keyset "k:emily"))
(define-keyset "k:doug" (read-keyset "k:doug"))
(define-keyset 'admin-kadena-stake (read-keyset "admin-kadena-stake"))
(define-keyset "k:stuart" (read-keyset "k:stuart"))
(commit-tx)

;/////////////////////////////
;Create test coin accounts
;//////////////////////////////

(begin-tx)
(env-gas 0) (env-gaslog)
(use coin)
(env-gaslog)
(expect
  "Gas cost of using the coin contract"
  2 (env-gas))
(env-gas 0) (env-gaslog)
(create-account "k:emily" (read-keyset "k:emily"))
(create-account 'admin-kadena-stake (read-keyset 'admin-kadena-stake))
(create-account "k:stuart" (read-keyset "k:stuart"))
(create-account "k:doug" (read-keyset "k:doug"))
(commit-tx)

;///////////////////////////////
;Credit test accounts test KDA
;////////////////////////////////
(begin-tx)
(use coin)
(env-gas 0) (env-gaslog)
(test-capability (DEBIT "k:emily"))
(env-gaslog)
(expect
  "Gas cost of testing the DEBIT capability"
  26 (env-gas))

;; credit tests
(test-capability (CREDIT "k:emily"))
(credit "k:emily" (read-keyset "k:emily") 1000.0)

(test-capability (CREDIT "k:doug"))
(credit "k:doug" (read-keyset "k:doug") 75.0)
(expect
  "account balance reflects credit"
  1000.0
  (get-balance "k:emily"))

(test-capability (CREDIT "admin-kadena-stake"))
(credit 'admin-kadena-stake (read-keyset 'admin-kadena-stake) 500.0)
(expect
  "account balance reflects credit"
  500.0
  (get-balance 'admin-kadena-stake))

(test-capability (CREDIT "k:stuart"))
(credit "k:stuart" (read-keyset "k:stuart") 1500.0)
(expect
  "account balance reflects credit"
  1500.0
  (get-balance "k:stuart"))
(commit-tx)


;;;;;lplplplplplplp;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;lplplplp\
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;lplplplp\
;; tokens.pact lp contract from kadenaswap exchange
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;////////\
;;! Keep in mind namespace for tokens is different on chain
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;LOAD FUNGIBLE UTIL
;LOAD TOKENS.PACT LP CONTRACT
;OUR TEST LP COIN IS- coin:coin
(begin-tx)
(define-namespace 'test (sig-keyset) (sig-keyset))
(env-data { 'ns: 'test })
(load "fungible-util.pact")
(load "tokens.pact")
(create-table ledger)
(create-table issuers)
(create-table supplies)

;DEFINE ACCOUNTS AGAIN
(env-data { "k:emily" : ["keys1"], "admin-kadena-stake": ["keys2"], "k:stuart": ["keys3"], "k:doug": ["keys4"], "prev-block-hash": "lPqiP54vy_E3rAkvgQVme2FreVXpVhOV3dIJYENZ2Zk" })
(env-keys ["keys1", "keys2", "keys3", "keys4"])
(define-keyset "k:emily" (read-keyset "k:emily"))
(define-keyset "k:doug" (read-keyset "k:doug"))
(define-keyset 'admin-kadena-stake (read-keyset "admin-kadena-stake"))
(define-keyset "k:stuart" (read-keyset "k:stuart"))

;Credit k:emily 1000 test lp coin:coin
(test-capability (CREDIT "coin:coin" "k:emily"))
(credit "coin:coin" "k:emily" (read-keyset "k:emily") 1000.0)
;Credit k:doug 500 test lp
(test-capability (CREDIT "coin:coin" "k:doug"))
(credit "coin:coin" "k:doug" (read-keyset "k:doug") 500.0)
;Credit k:stuart 200 test lp
(test-capability (CREDIT "coin:coin" "k:stuart"))
(credit "coin:coin" "k:stuart" (read-keyset "k:stuart") 200.0)
(tokens.get-balance "coin:coin" "k:emily")
(tokens.get-balance "coin:coin" "k:doug")
(tokens.get-balance "coin:coin" "k:stuart")
(commit-tx)


;;;;;;;;;;;;;;;;;;;;;;;;;////////////////////////////
;;kadena-stake TESTS
;;;;;;;;;;;;;;;;;;;;;;;;;;//////////////////////////

;Load Contract + Create Tables
(begin-tx)
(define-namespace 'test (sig-keyset) (sig-keyset))
(env-data { 'ns: 'test })
(load "kadena-stake.pact")
(create-table test.kadena-stake.pools)
(create-table test.kadena-stake.pools-usage)
(create-table test.kadena-stake.stakes)
(create-table test.kadena-stake.pool-user-stats)
(create-table test.kadena-stake.pool-lp-stats)

(env-gaslog)
(commit-tx)

;Test create pool 'test-pool' with k:emily for 200 KDA
(begin-tx)
(coin.get-balance "k:emily")
(test-capability (coin.TRANSFER "k:emily" "test-pool" 200.0))
(env-chain-data { "block-time" : (time "2021-04-28T00:00:00Z") })
(test.kadena-stake.create-pool
    "test-pool"
    "Test Pool"
    10.0
    200.0
    coin
    coin
    "k:emily"
    200.0
    0.0
    200.0
)
(coin.get-balance "k:emily")
(commit-tx)

;Test create pool 'test-pool2' with k:stuart for 200 KDA
(begin-tx)
(coin.get-balance "k:stuart")
(test-capability (coin.TRANSFER "k:stuart" "test-pool2" 200.0))
(env-chain-data { "block-time" : (time "2021-04-28T00:00:00Z") })
(test.kadena-stake.create-pool-lp
    "test-pool2"
    "Test Pool 2"
    10.0
    200.0
    coin
    coin
    coin
    "k:stuart"
    200.0
    0.0
    200.0
)
(coin.get-balance "k:stuart")
(commit-tx)

;Test create stake 100KDA in test-pool with pool owner EXPECT FAILURE - PASSES
(begin-tx)
(env-chain-data { "block-time" : (time "2021-04-28T00:00:01Z") })
(test-capability (coin.TRANSFER "k:emily" "test-pool" 100.0))
(expect-failure
 "Pool owners may not stake their own pools."
 "Pool owners may not stake their own pools."
(test.kadena-stake.create-stake "test-pool" "k:emily" 100.0))
(commit-tx)

;Test create stake 50KDA in test-pool with k:doug, 2 ms after test-pool is created
(begin-tx)
(env-chain-data { "block-time" : (time "2021-04-28T00:00:02Z") })
(test-capability (coin.TRANSFER "k:doug" "test-pool" 50.0))
(test.kadena-stake.create-stake
    "test-pool"
    "k:doug"
    50.0
)
(test.kadena-stake.get-pool-info "test-pool")
(commit-tx)

;Test create stake 100 coin:coin in test-pool2 with k:emily
(begin-tx)
(test.tokens.get-balance "coin:coin" "k:emily")
(env-chain-data { "block-time" : (time "2021-04-28T00:00:01Z") })
(test-capability (test.tokens.TRANSFER "coin:coin" "k:emily" "test-pool2" 100.0))
(test.kadena-stake.create-stake "test-pool2" "k:emily" 100.0)
(test.tokens.get-balance "coin:coin" "k:emily")
(test.tokens.get-balance "coin:coin" "test-pool2")
(commit-tx)

;Create stake in test-pool with k:stuart for 500kda
(begin-tx)
(coin.get-balance "k:stuart")
(test.kadena-stake.get-pool-info "test-pool")

(env-chain-data { "block-time" : (time "2021-04-28T00:00:02Z") })
(test-capability (coin.TRANSFER "k:stuart" "test-pool" 500.0))
(test.kadena-stake.create-stake
    "test-pool"
    "k:stuart"
    500.0
)

(coin.get-balance "k:stuart")
(test.kadena-stake.get-pool-info "test-pool")
(commit-tx)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;TEST POOL2 CONTAINS 200KDA & 100 coin:coin lp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;
;;TEST POOL CONTAINS 750KDA
;;200 KDA FROM POOL START
;;50 KDA FROM k:doug
;;500 KDA from k:stuart
;;;;;;;;;;;;;;;;;;;;;;;
(begin-tx)
(coin.get-balance "test-pool")
(coin.get-balance "test-pool2")
(test.tokens.get-balance "coin:coin" "test-pool2")
(test.kadena-stake.get-pool-info "test-pool")
(test.kadena-stake.get-pool-info "test-pool2")
(commit-tx)


;Test calculate rewards - PASS
(begin-tx)
(env-chain-data { "block-time" : (time "2022-04-28T00:00:01Z") })
(expect
  "Correct percentage is calculated"
  (test.kadena-stake.calculate-owed-upto-now 10.0 (time "2021-04-28T00:00:00Z") 10.0 (coin.precision) "test-pool")
  1.000000031709
)
(commit-tx)

;Break pool test
(begin-tx)
(env-chain-data { "block-time" : (time "2022-04-28T00:00:01Z") })
(test.kadena-stake.calculate-owed-upto-now 500.0 (time "2021-04-28T00:00:00Z") 1000.0 (coin.precision) "test-pool")
(commit-tx)


;Test claim rewards with non-existant account EXPECT FAILURE - PASSES
(begin-tx)
(use test.kadena-stake)
(test.kadena-stake.get-pair-key coin coin)
(coin.get-balance "test-pool")
(coin.get-balance "k:emily")
(env-chain-data { "block-time" : (time "2022-04-28T00:00:01Z") })
(expect-failure
 "doug cant deactivate emilys pool"
 "row not found: k:emily:test-pool"
(test.kadena-stake.claim-rewards "test-pool" "k:emily"))
(coin.get-balance "test-pool")
(coin.get-balance "k:emily")
(commit-tx)

;Test add 200 KDA more reward-token with emily
(begin-tx)
(use test.kadena-stake)
(coin.get-balance "test-pool")
(coin.get-balance "k:emily")
(test.kadena-stake.get-pool-info "test-pool")

(test-capability (coin.TRANSFER "k:emily" "test-pool" 200.0))
(add-balance-to-pool "test-pool" "k:emily" 200.0)

(test.kadena-stake.get-pool-info "test-pool")
(coin.get-balance "test-pool")
(coin.get-balance "k:emily")

(commit-tx)

;Test claim rewards function a year later with k:doug - PASS
(begin-tx)
(use test.kadena-stake)

(coin.get-balance "test-pool")
(coin.get-balance "k:doug")
(test.kadena-stake.get-pool-info "test-pool")

(env-chain-data { "block-time" : (time "2022-04-28T00:00:02Z") })

(test.kadena-stake.get-pool-info "test-pool")

(test.kadena-stake.claim-rewards "test-pool" "k:doug")
(expect
    "account balance reflects credit"
    30.000000000000
    (coin.get-balance "k:doug")
)


(coin.get-balance "test-pool")
(coin.get-balance "k:doug")
(test.kadena-stake.get-pool-info "test-pool")
(commit-tx)


;Test claim rewards function a year later with k:emily from test-pool2
(begin-tx)
(use test.kadena-stake)

(test.tokens.get-balance "coin:coin" "k:emily")
(coin.get-balance "test-pool2")
(coin.get-balance "k:emily")
(test.kadena-stake.get-pool-info "test-pool2")
(test.tokens.get-balance "coin:coin" "test-pool2")

(env-chain-data { "block-time" : (time "2022-04-28T00:00:02Z") })

(test.kadena-stake.get-pool-info "test-pool2")

(test.kadena-stake.claim-rewards "test-pool2" "k:emily")
(expect
    "account balance reflects credit"
    610.000000317097
    (coin.get-balance "k:emily")
)

(test.tokens.get-balance "coin:coin" "k:emily")
(coin.get-balance "test-pool2")
(coin.get-balance "k:emily")
(test.kadena-stake.get-pool-info "test-pool2")
(test.tokens.get-balance "coin:coin" "test-pool2")
(commit-tx)


;Test withdraw k:emily stake from test-pool2
(begin-tx)
(use test.kadena-stake)
(test.tokens.get-balance "coin:coin" "test-pool2")
(test.tokens.get-balance "coin:coin" "k:emily")
(test.kadena-stake.get-pool-info "test-pool2")
(coin.get-balance "test-pool2")
(coin.get-balance "k:emily")
(env-chain-data { "block-time" : (time "2022-04-28T00:00:06Z") })
(test-capability (UPDATE))
(test.kadena-stake.withdraw-stake "k:emily" "test-pool2")

(test.kadena-stake.get-pool-info "test-pool2")
(coin.get-balance "test-pool2")
(coin.get-balance "k:emily")
(test.tokens.get-balance "coin:coin" "test-pool2")
(test.tokens.get-balance "coin:coin" "k:emily")
(commit-tx)


;claim rewards a year later with stuart
(begin-tx)
(use test.kadena-stake)

(coin.get-balance "test-pool")
(coin.get-balance "k:stuart")

(test.kadena-stake.get-pool-info "test-pool")

(env-chain-data { "block-time" : (time "2022-04-28T00:00:03Z") })

(test.kadena-stake.get-pool-info "test-pool")
(test.kadena-stake.claim-rewards "test-pool" "k:stuart")

(coin.get-balance "test-pool")
(coin.get-balance "k:stuart")
(test.kadena-stake.get-pool-info "test-pool")
(commit-tx)

;Test getters get-pools get-pool-info - PASS
(begin-tx)
(coin.get-balance "test-pool")
(keys test.kadena-stake.pools)
(test.kadena-stake.get-pools)
(test.kadena-stake.get-pool-info "test-pool")
(commit-tx)


;Test withdraw doug stake before deactivated pool - PASS / COMMENTED OUT / TESTED AGAIN LATER AFTER POOL DEACTIVATES
; (begin-tx)
; (use test.kadena-stake)
; (test.kadena-stake.get-pool-info "test-pool")
; (coin.get-balance "test-pool")
; (coin.get-balance "k:doug")
; (env-chain-data { "block-time" : (time "2022-04-28T00:00:06Z") })
; (test-capability (UPDATE))
; (test.kadena-stake.withdraw-stake "k:doug" "test-pool")
; (expect
;     "account balance reflects credit"
;     77.500000368325
;     (coin.get-balance "k:doug")
; )
; (test.kadena-stake.get-pool-info "test-pool")
; (coin.get-balance "test-pool")
; (coin.get-balance "k:doug")
; (commit-tx)


;Test deactivate pool - PASS
(begin-tx)
(use test.kadena-stake)
(test.kadena-stake.get-pool-info "test-pool")
(coin.get-balance "k:emily")
(coin.get-balance "test-pool")
(env-chain-data { "block-time" : (time "2022-04-28T00:00:03Z") })
(test.kadena-stake.deactivate-pool "test-pool" "k:emily")
(coin.get-balance "k:emily")
(coin.get-balance "test-pool")
(commit-tx)


;Test update pool usage - PASS - COMMENTED OUT/CALLED BY SEPARATE FUNCTION
; (begin-tx)
; (use test.kadena-stake)
; (test-capability (UPDATE))
; (test.kadena-stake.update-pool-usage-after-rewards-claimed "test-pool" 100.0)
; (commit-tx)


;Test deactivate pool with staker k:doug EXPECT FAILURE - PASS
(begin-tx)
(use test.kadena-stake)
(coin.get-balance "test-pool")
(coin.get-balance "k:doug")
(expect-failure
 "doug cant deactivate emilys pool"
 "Access prohibited."
(test.kadena-stake.deactivate-pool "test-pool" "k:doug"))
(coin.get-balance "k:doug")
(coin.get-balance "test-pool")
(commit-tx)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;////////////////////////////////////////////
;; k:dougs KDA and owed amount is still in pool after pool owner deactivation
;;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;Test create stake after deactivate - EXPECT FAILURE / PASS k:doug cannot stake !
(begin-tx)
(env-chain-data { "block-time" : (time "2022-04-28T00:00:02Z") })
(test-capability (coin.TRANSFER "k:doug" "test-pool" 10.0))
(expect-failure
 "Cant stake pool inactive"
 "Staking pool is not active."
(test.kadena-stake.create-stake
    "test-pool"
    "k:doug"
    10.0
))
(test.kadena-stake.get-pool-info "test-pool")
(commit-tx)

;Test withdrawing dougs rewards 1ms after pool is deactivated - EXPECT FAILURE - PASS
(begin-tx)
(use test.kadena-stake)

(coin.get-balance "test-pool")
(coin.get-balance "k:doug")

(env-chain-data { "block-time" : (time "2022-04-28T00:00:05Z") })

(expect-failure
 "Cant stake pool inactive"
 "Staking pool is not active."
(test.kadena-stake.claim-rewards "test-pool" "k:doug"))

(coin.get-balance "test-pool")
(coin.get-balance "k:doug")
(commit-tx)

;Test deactivate pool again with pool owner k:emily after pool deactivated - EXPECT FAILURE - PASS
(begin-tx)
(use test.kadena-stake)
(coin.get-balance "test-pool")
(coin.get-balance "k:emily")
(test.kadena-stake.get-pool-info "test-pool")

(expect-failure
 "Cant deactivate a deactivated pool"
 "Staking pool is not active."
(test.kadena-stake.deactivate-pool "test-pool" "k:emily"))


(test.kadena-stake.get-pool-info "test-pool")
(coin.get-balance "k:emily")
(coin.get-balance "test-pool")
(commit-tx)

;Test withdraw stake k:stuart after deactivated pool
(begin-tx)
(use test.kadena-stake)
(test.kadena-stake.get-pool-info "test-pool")
(coin.get-balance "test-pool")
(coin.get-balance "k:stuart")
(env-chain-data { "block-time" : (time "2022-04-28T00:00:06Z") })
(test-capability (UPDATE))
(test.kadena-stake.withdraw-stake "k:stuart" "test-pool")
(expect
    "account balance reflects credit"
    1350.000001585489
    (coin.get-balance "k:stuart")
)
(test.kadena-stake.get-pool-info "test-pool")
(coin.get-balance "test-pool")
(coin.get-balance "k:stuart")
(commit-tx)

;Test withdraw stake k:doug after deactivated pool
(begin-tx)
(use test.kadena-stake)
(test.kadena-stake.get-pool-info "test-pool")
(coin.get-balance "test-pool")
(coin.get-balance "k:doug")
(env-chain-data { "block-time" : (time "2022-04-28T00:00:06Z") })
(test-capability (UPDATE))
(test.kadena-stake.withdraw-stake "k:doug" "test-pool")
(expect
    "account balance reflects credit"
    80.000000000000
    (coin.get-balance "k:doug")
)
(test.kadena-stake.get-pool-info "test-pool")
(coin.get-balance "test-pool")
(coin.get-balance "k:doug")
(commit-tx)

;Test deactivate pool again with pool owner k:emily after pool is empty - EXPECT FAILURE - PASS
(begin-tx)
(use test.kadena-stake)
(coin.get-balance "test-pool")
(coin.get-balance "k:emily")
(test.kadena-stake.get-pool-info "test-pool")

(expect-failure
 "Cant deactivate a deactivated pool"
 "Pool is empty."
(test.kadena-stake.deactivate-pool "test-pool" "k:emily"))


(test.kadena-stake.get-pool-info "test-pool")
(coin.get-balance "k:emily")
(coin.get-balance "test-pool")
(commit-tx)

;Test getters get-pools get-pool-info - PASS
(begin-tx)
(coin.get-balance "test-pool")
(keys test.kadena-stake.pools)
(test.kadena-stake.get-pools)
(test.kadena-stake.get-pool-info "test-pool")
(commit-tx)
